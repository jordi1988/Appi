<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Active" xml:space="preserve">
    <value>Aktiv</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>Zurück</value>
  </data>
  <data name="Collecting data with query '{0}' within {1}" xml:space="preserve">
    <value>Sammle Daten mit Suchbegriff '{0}' innerhalb {1}</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Beschreibung</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Beenden</value>
  </data>
  <data name="Group aliases" xml:space="preserve">
    <value>Aliasse der Gruppen</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Sorry, there is [bold]no action[/] you can choose from. [red]Goodbye.[/]" xml:space="preserve">
    <value>Entschuldigung, es steht [bold]keine Aktion[/] zur Auswahl. [red]Auf Wiedersehen.[/]</value>
  </data>
  <data name="Sorry, [bold]no items[/] were found." xml:space="preserve">
    <value>Entschuldigung, es wurden [bold]keine Ergebnisse[/] gefunden.</value>
  </data>
  <data name="Source alias" xml:space="preserve">
    <value>Alias der Quelle</value>
  </data>
  <data name="The file [yellow]{0}[/] was installed." xml:space="preserve">
    <value>Die Datei [yellow]{0}[/] wurde installiert.</value>
  </data>
  <data name="The plugin was registered in 'sources.json'." xml:space="preserve">
    <value>Das Plugin wurde in der 'sources.json' registriert.</value>
  </data>
  <data name="The resource file [yellow]{0}[/] was installed." xml:space="preserve">
    <value>Die Ressourcendatei [yellow]{0}[/] wurde installiert.</value>
  </data>
  <data name="You can only pass one option, either 'source' or 'group'." xml:space="preserve">
    <value>Sie können nur eine Option angebeben; entweder 'source' oder 'group'.</value>
  </data>
  <data name="[b]Which [red]action[/] should be invoked? [/]" xml:space="preserve">
    <value>[b]Welche [red]Aktion[/] soll ausgeführt werden? [/]</value>
  </data>
  <data name="[grey](Move up and down to reveal more items)[/]" xml:space="preserve">
    <value>[grey](Auswahl nach oben und unten bewegen, um weitere Treffer anzuzeigen)[/]</value>
  </data>
  <data name="[red]Goodbye.[/]" xml:space="preserve">
    <value>[red]Auf Wiedersehen.[/]</value>
  </data>
  <data name="[white]Please select item[/]" xml:space="preserve">
    <value>[white]Bitte Auswahl treffen[/]</value>
  </data>
  <data name="[yellow]Remember to allow external plugins to be loaded using the 'config' command.[/]" xml:space="preserve">
    <value>[yellow]Denken Sie daran, das Laden von externen Plugins mit dem 'config' Befehl zu erlauben.[/]</value>
  </data>
  <data name="[yellow]The file [gray]{0}[/] could not be found.[/]" xml:space="preserve">
    <value>[yellow]Die Datei [gray]{0}[/] konnte nicht gefunden werden.[/]</value>
  </data>
  <data name="[yellow]The file [gray]{0}[/] must be of format DLL.[/]" xml:space="preserve">
    <value>[yellow]Die Datei [gray]{0}[/] muss im DLL-Format sein.[/]</value>
  </data>
</root>